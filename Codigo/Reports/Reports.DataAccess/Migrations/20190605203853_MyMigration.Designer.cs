// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reports.DataAccess;

namespace Reports.DataAccess.Migrations
{
    [DbContext(typeof(ReportsContext))]
    [Migration("20190605203853_MyMigration")]
    partial class MyMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Reports.Domain.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConnectionString")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Reports.Domain.AreaManager", b =>
                {
                    b.Property<Guid>("AreaId");

                    b.Property<Guid>("ManagerId");

                    b.HasKey("AreaId", "ManagerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("AreaManager");
                });

            modelBuilder.Entity("Reports.Domain.BaseCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Conditions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseCondition");
                });

            modelBuilder.Entity("Reports.Domain.Indicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AreaId");

                    b.Property<Guid?>("GreenConditionId");

                    b.Property<string>("Name");

                    b.Property<Guid?>("RedConditionId");

                    b.Property<Guid?>("YellowConditionId");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("GreenConditionId");

                    b.HasIndex("RedConditionId");

                    b.HasIndex("YellowConditionId");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("Reports.Domain.Indicator_Manager", b =>
                {
                    b.Property<Guid>("ManagerId");

                    b.Property<Guid>("IndicatorId");

                    b.Property<string>("CustomName");

                    b.Property<Guid>("Indicator_ManagerId");

                    b.Property<int>("Position");

                    b.Property<Guid>("User");

                    b.Property<bool>("Visible");

                    b.HasKey("ManagerId", "IndicatorId");

                    b.HasIndex("IndicatorId");

                    b.ToTable("Indicator_Manager");
                });

            modelBuilder.Entity("Reports.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Admin");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mail");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Reports.Domain.Value", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Values");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Value");
                });

            modelBuilder.Entity("Reports.Domain.CompositeCondition", b =>
                {
                    b.HasBaseType("Reports.Domain.BaseCondition");

                    b.Property<Guid?>("DerId");

                    b.Property<Guid?>("IzqId");

                    b.HasIndex("DerId");

                    b.HasIndex("IzqId");

                    b.HasDiscriminator().HasValue("CompositeCondition");
                });

            modelBuilder.Entity("Reports.Domain.Condition", b =>
                {
                    b.HasBaseType("Reports.Domain.BaseCondition");

                    b.Property<string>("Operator");

                    b.Property<Guid?>("ValueDerId");

                    b.Property<Guid?>("ValueIzqId");

                    b.HasIndex("ValueDerId");

                    b.HasIndex("ValueIzqId");

                    b.HasDiscriminator().HasValue("Condition");
                });

            modelBuilder.Entity("Reports.Domain.IntValue", b =>
                {
                    b.HasBaseType("Reports.Domain.Value");

                    b.Property<int>("Data");

                    b.HasDiscriminator().HasValue("IntValue");
                });

            modelBuilder.Entity("Reports.Domain.SQLValue", b =>
                {
                    b.HasBaseType("Reports.Domain.Value");

                    b.Property<string>("Query");

                    b.HasDiscriminator().HasValue("SQLValue");
                });

            modelBuilder.Entity("Reports.Domain.StringValue", b =>
                {
                    b.HasBaseType("Reports.Domain.Value");

                    b.Property<string>("Data")
                        .HasColumnName("StringValue_Data");

                    b.HasDiscriminator().HasValue("StringValue");
                });

            modelBuilder.Entity("Reports.Domain.AndCondition", b =>
                {
                    b.HasBaseType("Reports.Domain.CompositeCondition");

                    b.HasDiscriminator().HasValue("AndCondition");
                });

            modelBuilder.Entity("Reports.Domain.OrCondition", b =>
                {
                    b.HasBaseType("Reports.Domain.CompositeCondition");

                    b.HasDiscriminator().HasValue("OrCondition");
                });

            modelBuilder.Entity("Reports.Domain.AreaManager", b =>
                {
                    b.HasOne("Reports.Domain.Area", "Area")
                        .WithMany("AreaManagers")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Reports.Domain.User", "Manager")
                        .WithMany("AreaManagers")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reports.Domain.Indicator", b =>
                {
                    b.HasOne("Reports.Domain.Area")
                        .WithMany("Indicators")
                        .HasForeignKey("AreaId");

                    b.HasOne("Reports.Domain.BaseCondition", "GreenCondition")
                        .WithMany()
                        .HasForeignKey("GreenConditionId");

                    b.HasOne("Reports.Domain.BaseCondition", "RedCondition")
                        .WithMany()
                        .HasForeignKey("RedConditionId");

                    b.HasOne("Reports.Domain.BaseCondition", "YellowCondition")
                        .WithMany()
                        .HasForeignKey("YellowConditionId");
                });

            modelBuilder.Entity("Reports.Domain.Indicator_Manager", b =>
                {
                    b.HasOne("Reports.Domain.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reports.Domain.CompositeCondition", b =>
                {
                    b.HasOne("Reports.Domain.BaseCondition", "Der")
                        .WithMany()
                        .HasForeignKey("DerId");

                    b.HasOne("Reports.Domain.BaseCondition", "Izq")
                        .WithMany()
                        .HasForeignKey("IzqId");
                });

            modelBuilder.Entity("Reports.Domain.Condition", b =>
                {
                    b.HasOne("Reports.Domain.Value", "ValueDer")
                        .WithMany()
                        .HasForeignKey("ValueDerId");

                    b.HasOne("Reports.Domain.Value", "ValueIzq")
                        .WithMany()
                        .HasForeignKey("ValueIzqId");
                });
#pragma warning restore 612, 618
        }
    }
}
