// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reports.DataAccess;

namespace Reports.DataAccess.Migrations
{
    [DbContext(typeof(ReportsContext))]
    partial class ReportsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Reports.Domain.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConnectionString");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Reports.Domain.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Components");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Component");
                });

            modelBuilder.Entity("Reports.Domain.Indicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AreaId");

                    b.Property<string>("Color");

                    b.Property<Guid?>("ComponentId");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ComponentId");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("Reports.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Admin");

                    b.Property<Guid?>("AreaId");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName");

                    b.HasIndex("AreaId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Reports.Domain.ValueExpression", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ValueExpressions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ValueExpression");
                });

            modelBuilder.Entity("Reports.Domain.Condition", b =>
                {
                    b.HasBaseType("Reports.Domain.Component");

                    b.Property<string>("Operation");

                    b.Property<Guid?>("ValueDerId");

                    b.Property<Guid?>("ValueIzqId");

                    b.HasIndex("ValueDerId");

                    b.HasIndex("ValueIzqId");

                    b.HasDiscriminator().HasValue("Condition");
                });

            modelBuilder.Entity("Reports.Domain.LogicExpression", b =>
                {
                    b.HasBaseType("Reports.Domain.Component");

                    b.Property<Guid?>("CompDerId");

                    b.Property<Guid?>("CompIzqId");

                    b.HasIndex("CompDerId");

                    b.HasIndex("CompIzqId");

                    b.ToTable("LogicExpressions");

                    b.HasDiscriminator().HasValue("LogicExpression");
                });

            modelBuilder.Entity("Reports.Domain.IntValue", b =>
                {
                    b.HasBaseType("Reports.Domain.ValueExpression");

                    b.HasDiscriminator().HasValue("IntValue");
                });

            modelBuilder.Entity("Reports.Domain.SQLValue", b =>
                {
                    b.HasBaseType("Reports.Domain.ValueExpression");

                    b.HasDiscriminator().HasValue("SQLValue");
                });

            modelBuilder.Entity("Reports.Domain.StringValue", b =>
                {
                    b.HasBaseType("Reports.Domain.ValueExpression");

                    b.HasDiscriminator().HasValue("StringValue");
                });

            modelBuilder.Entity("Reports.Domain.LogicAnd", b =>
                {
                    b.HasBaseType("Reports.Domain.LogicExpression");

                    b.HasDiscriminator().HasValue("LogicAnd");
                });

            modelBuilder.Entity("Reports.Domain.LogicOr", b =>
                {
                    b.HasBaseType("Reports.Domain.LogicExpression");

                    b.HasDiscriminator().HasValue("LogicOr");
                });

            modelBuilder.Entity("Reports.Domain.Indicator", b =>
                {
                    b.HasOne("Reports.Domain.Area")
                        .WithMany("Indicators")
                        .HasForeignKey("AreaId");

                    b.HasOne("Reports.Domain.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");
                });

            modelBuilder.Entity("Reports.Domain.User", b =>
                {
                    b.HasOne("Reports.Domain.Area")
                        .WithMany("Managers")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("Reports.Domain.Condition", b =>
                {
                    b.HasOne("Reports.Domain.ValueExpression", "ValueDer")
                        .WithMany()
                        .HasForeignKey("ValueDerId");

                    b.HasOne("Reports.Domain.ValueExpression", "ValueIzq")
                        .WithMany()
                        .HasForeignKey("ValueIzqId");
                });

            modelBuilder.Entity("Reports.Domain.LogicExpression", b =>
                {
                    b.HasOne("Reports.Domain.Component", "CompDer")
                        .WithMany()
                        .HasForeignKey("CompDerId");

                    b.HasOne("Reports.Domain.Component", "CompIzq")
                        .WithMany()
                        .HasForeignKey("CompIzqId");
                });
#pragma warning restore 612, 618
        }
    }
}
